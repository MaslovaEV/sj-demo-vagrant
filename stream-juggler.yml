version: '3.1'
services:

# ZOOKEEPER SERVICE 
  zookeeper:
    image: zookeeper
    environment:
      - ZOO_MY_ID=1
      - ZOO_SERVERS=0.0.0.0:2888:3888
    networks:
      - mesos
    ports:
      - "2181:2181"
      - "2888:2888"
      - "3888:3888"
  
# MASTER SERVICE
  master:
    image: mesosphere/mesos-master:1.1.1
    depends_on:
      - zookeeper
    ports:
      - "5050:5050"
    networks:
      - mesos
      - sj
    environment:
      - MESOS_CLUSTER=stream-juggler
      - MESOS_HOST=${HOST_IP:-master}
      - MESOS_PORT=5050
      - MESOS_ZK=zk://zookeeper:2181/mesos
      - MESOS_QUORUM=1
      - MESOS_LOG_DIR=/var/log/mesos
      - MESOS_WORK_DIR=/var/tmp/mesos
      - MESOS_HOSTNAME=192.168.172.17
  
# SLAVE SERVICE
  slave:
    image: mesosphere/mesos-slave:1.1.1
    depends_on:
      - master
    command: 
      - "--launcher=posix"
    networks:
      - mesos
      - sj
    ports:
      - "5051:5051"
      - "31500-31550:31500-31550"
    environment:
      - MESOS_PORT=5051
      - MESOS_MASTER=zk://zookeeper:2181/mesos
      - MESOS_CONTAINERIZERS=docker,mesos
      - MESOS_LOG_DIR=/var/log/mesos
      - MESOS_RESOURCES=cpus:4;mem:4096;disk:1024;ports:[31500-31550]
      - MESOS_WORK_DIR=/var/tmp/mesos
      - MESOS_HOSTNAME=192.168.172.17
      - MESOS_SLAVE_PARAMS="--launcher=posix"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
      - "/usr/lib/jvm/java-8-oracle:/usr/lib/jvm/java-7-openjdk-amd64"

# MARATHON SERVICE
  marathon:
    image: mesosphere/marathon:v1.3.5
    depends_on:
      - master
    networks:
      - mesos
      - sj
    command:
      - "--master=zk://zookeeper:2181/mesos"
      - "--zk=zk://zookeeper:2181/marathon"
    ports: 
      - "8080:8080"
    environment:
      - JAVA_HOME
    healthcheck:
      test: ["CMD", "curl", "-f", "http://0.0.0.0:8080"]
      interval: 5s
      timeout: 10s
      retries: 2

# MONGO SERVICE
  mongo:
    image: mongo
    depends_on:
      - zookeeper
    ports:
      - 27017:27017
    networks:
      - sj

# SJ-REST SERVICE
  sj-rest:
    image: bwsw/sj-rest:dev
    ports:
      - "8888:8080"
    environment:
      - MONGO_HOSTS=mongo:27017
      - ZOOKEEPER_HOST=zookeeper
      - ZOOKEEPER_PORT=2181
    depends_on:
      - mongo
      - zookeeper
    networks:
      - sj
      - mesos
    healthcheck:
      test: ["CMD", "curl", "-f", "http://0.0.0.0:8080/v1/providers"]
      interval: 5s
      timeout: 10s
      retries: 5

# KAFKA SERVICE
  kafka:
    image: ches/kafka
    ports:
      - "9092:9092"
      - "7203:7203"
    environment:
      - ZOOKEEPER_IP=zookeeper
      - KAFKA_ADVERTISED_HOST_NAME=kafka
    depends_on:
      - zookeeper
    networks:
      - sj
      - mesos

# ELASTICSEARCH SERVICE
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:5.1.1
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      - http.host=0.0.0.0
      - xpack.security.enabled=false
      - transport.host=0.0.0.0
      - cluster.name=elasticsearch
    networks:
      - sj

# KIBANA SERVICE
  kibana:
    image: kibana:5.1.1
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_URL=http://elasticsearch:9200
    networks:
      - sj

# TSTREAMS TRANSACTION SERVICE
  tts:
    image: bwsw/tstreams-transaction-server
    ports:
      - "31071:8080"
    depends_on:
      - zookeeper
    networks:
      - sj
      - mesos
    environment:
      - HOST=192.168.172.17
      - PORT0=31071
    volumes:
      - "/vagrant/config.properties:/etc/conf/config.properties"


networks:
  mesos:
  sj:
